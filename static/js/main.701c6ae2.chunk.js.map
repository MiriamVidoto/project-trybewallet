{"version":3,"sources":["redux/actions/index.js","pages/Login.js","components/Header.js","components/Table.js","components/WalletForm.js","pages/Wallet.js","App.js","serviceWorker.js","redux/reducers/user.js","redux/reducers/wallet.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["Login","validateButton","state","email","validatePasswordLength","password","length","validateEmail","match","handleChange","target","name","value","setState","buttonDisabled","handleClick","props","history","loginDispatch","push","this","htmlFor","type","id","data-testid","onChange","placeholder","disabled","onClick","React","Component","connect","dispatch","loginAction","Header","userEmail","totalExpenses","expenses","reduce","acc","crr","Number","exchangeRates","currency","ask","toFixed","store","user","wallet","Table","handleClickDelet","newExpensesDispatch","filter","expense","handleClickEdit","editDispatch","map","key","description","tag","method","newExpenses","newExpensesData","editAction","WalletForm","getCurrenciesQuotes","quotes","prevState","expenseDispatch","getCurrencies","currencies","elemento","fetch","response","json","data","Object","keys","curr","expenseData","expenseAction","Wallet","App","exact","path","component","Boolean","window","location","hostname","INITIAL_STATE","action","editor","idToEdit","rootReducer","combineReducers","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.701c6ae2.chunk.js","sourcesContent":["export const loginAction = (email) => ({\n  type: 'USER_EMAIL',\n  email,\n});\n\nexport const expenseAction = (expenseData) => ({\n  type: 'ADD_DATA_EXPENSE',\n  expenseData,\n});\n\nexport const newExpensesAction = (newExpensesData) => ({\n  type: 'NEW_DATA_EXPENSES',\n  newExpensesData,\n});\n\nexport const editAction = (id) => ({\n  type: 'EDIT_EXPENSE',\n  id,\n});\n\nexport const endEditAction = (newExpenses) => ({\n  type: 'END_EDIT_EXPENSE',\n  newExpenses,\n});\n\nexport const fetchCurrencies = () => async (dispatch) => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await response.json();\n  const currencies = Object.keys(data).filter((curr) => curr !== 'USDT');\n  dispatch({\n    type: 'GET_CURRENCIES',\n    currencies,\n  });\n};\n\nexport const fetchCurrencyQuotes = () => async (dispatch) => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await response.json();\n  dispatch({\n    type: 'GET_QUOTAS',\n    quotes: data,\n  });\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loginAction } from '../redux/actions';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      buttonDisabled: true,\n    };\n  }\n\nvalidateButton = () => {\n  const { email, password } = this.state;\n  const minPassword = 6;\n  const regex = /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n  const validatePasswordLength = password.length >= minPassword;\n  const validateEmail = email.match(regex);\n  return validatePasswordLength && validateEmail;\n}\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    }, () => this.setState({ buttonDisabled: !this.validateButton() }));\n  };\n\n  handleClick = () => {\n    const { history, loginDispatch } = this.props;\n    const { email } = this.state;\n    loginDispatch(email);\n    history.push('/carteira');\n  }\n\n  render() {\n    const { email, password, buttonDisabled } = this.state;\n    return (\n      <div>\n        <h1>Login</h1>\n        <label htmlFor=\"email\">\n          Email:\n          <input\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            data-testid=\"email-input\"\n            value={ email }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"password\">\n          Senha:\n          <input\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            data-testid=\"password-input\"\n            placeholder=\"min 6 dÃ­gitos\"\n            value={ password }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <button\n          type=\"button\"\n          disabled={ buttonDisabled }\n          onClick={ this.handleClick }\n        >\n          Entrar\n        </button>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  loginDispatch: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  loginDispatch: (email) => dispatch(loginAction(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Header extends Component {\n  render() {\n    const { userEmail, expenses } = this.props;\n    const totalExpenses = expenses.reduce((acc, crr) => (\n      acc + (Number(crr.value) * Number(crr.exchangeRates[crr.currency].ask))\n    ), 0);\n\n    return (\n      <div>\n        <span data-testid=\"email-field\">\n          { `Email: ${userEmail}` }\n        </span>\n        <span>Despesa total:</span>\n        <span data-testid=\"total-field\">\n          { totalExpenses.toFixed(2) }\n        </span>\n        <span data-testid=\"header-currency-field\">\n          BRL\n        </span>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (store) => ({\n  userEmail: store.user.email,\n  expenses: store.wallet.expenses,\n});\n\nHeader.propTypes = {\n  userEmail: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { newExpensesAction, editAction } from '../redux/actions';\n\nclass Table extends Component {\n  handleClickDelet = ({ target }) => {\n    const { expenses, newExpensesDispatch } = this.props;\n    const { id } = target;\n    const newExpenses = expenses.filter((expense) => expense.id !== Number(id));\n    newExpensesDispatch(newExpenses);\n  }\n\n  handleClickEdit = ({ target }) => {\n    const { editDispatch } = this.props;\n    const { id } = target;\n    editDispatch(id);\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <div>\n        <table>\n          <thead>\n            <tr>\n              <th>DescriÃ§Ã£o</th>\n              <th>Tag</th>\n              <th>MÃ©todo de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>CÃ¢mbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversÃ£o</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              expenses.map((expense) => (\n                <tr key={ expense.id }>\n                  <td>{expense.description}</td>\n                  <td>{expense.tag}</td>\n                  <td>{expense.method}</td>\n                  <td>{Number(expense.value).toFixed(2)}</td>\n                  <td>{expense.exchangeRates[expense.currency].name}</td>\n                  <td>\n                    {Number(expense.exchangeRates[expense.currency].ask).toFixed(2)}\n                  </td>\n                  <td>\n                    { Number((expense.value)\n                    * (expense.exchangeRates[expense.currency].ask)).toFixed(2)}\n                  </td>\n                  <td>BRL</td>\n                  <td>\n                    <button\n                      type=\"button\"\n                      data-testid=\"edit-btn\"\n                      id={ expense.id }\n                      onClick={ this.handleClickEdit }\n                    >\n                      Editar\n                    </button>\n                    <button\n                      type=\"button\"\n                      data-testid=\"delete-btn\"\n                      id={ expense.id }\n                      onClick={ this.handleClickDelet }\n                    >\n                      Excluir\n                    </button>\n                  </td>\n                </tr>\n              ))\n            }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  newExpensesDispatch: PropTypes.func.isRequired,\n  editDispatch: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (store) => ({\n  expenses: store.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  newExpensesDispatch: (newExpenses) => dispatch(newExpensesAction(newExpenses)),\n  editDispatch: (id, newExpensesData) => (\n    dispatch(editAction(id, newExpensesData))),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { expenseAction,\n  fetchCurrencies,\n  fetchCurrencyQuotes } from '../redux/actions';\n\nclass WalletForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      value: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'AlimentaÃ§Ã£o',\n      description: '',\n      id: -1,\n      exchangeRates: {},\n    };\n  }\n\n  componentDidMount() {\n    const { getCurrencies } = this.props;\n    getCurrencies();\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleClick = async () => {\n    const { getCurrenciesQuotes } = this.props;\n    await getCurrenciesQuotes();\n    const { quotes } = this.props;\n    this.setState((prevState) => ({\n      id: prevState.id + 1,\n      exchangeRates: quotes,\n    }), () => {\n      const { expenseDispatch } = this.props;\n      expenseDispatch(this.state);\n      this.setState({\n        value: '',\n        description: '',\n      });\n    });\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const { value, currency, method, tag, description } = this.state;\n    const methods = ['Dinheiro', 'CartÃ£o de crÃ©dito', 'CartÃ£o de dÃ©bito'];\n    const tags = ['AlimentaÃ§Ã£o', 'Lazer', 'Trabalho', 'Transporte', 'SaÃºde'];\n\n    return (\n      <div>\n        <form>\n          <label htmlFor=\"value\">\n            Valor:\n            <input\n              data-testid=\"value-input\"\n              id=\"value\"\n              name=\"value\"\n              value={ value }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"currency\">\n            Moeda:\n            <select\n              data-testid=\"currency-input\"\n              name=\"currency\"\n              id=\"currency\"\n              value={ currency }\n              onChange={ this.handleChange }\n            >\n              {\n                currencies.map((elemento) => (\n                  <option key={ elemento }>{elemento}</option>\n                ))\n              }\n            </select>\n          </label>\n          <label htmlFor=\"method\">\n            MÃ©todo de pagamento:\n            <select\n              data-testid=\"method-input\"\n              name=\"method\"\n              id=\"method\"\n              value={ method }\n              onChange={ this.handleChange }\n            >\n              {\n                methods.map((elemento) => (\n                  <option key={ elemento }>{elemento}</option>\n                ))\n              }\n            </select>\n          </label>\n          <label htmlFor=\"tag\">\n            Categoria:\n            <select\n              data-testid=\"tag-input\"\n              name=\"tag\"\n              id=\"tag\"\n              value={ tag }\n              onChange={ this.handleChange }\n            >\n              {\n                tags.map((elemento) => (\n                  <option key={ elemento }>{elemento}</option>\n                ))\n              }\n            </select>\n          </label>\n          <label htmlFor=\"description\">\n            DescriÃ§Ã£o:\n            <input\n              data-testid=\"description-input\"\n              id=\"description\"\n              name=\"description\"\n              value={ description }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <button\n            type=\"button\"\n            onClick={ this.handleClick }\n          >\n            Adicionar despesa\n          </button>\n\n        </form>\n      </div>\n    );\n  }\n}\n\nWalletForm.propTypes = {\n  expenseDispatch: PropTypes.func.isRequired,\n  getCurrencies: PropTypes.func.isRequired,\n  getCurrenciesQuotes: PropTypes.func.isRequired,\n  quotes: PropTypes.objectOf(PropTypes.object).isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrencies: () => dispatch(fetchCurrencies()),\n  getCurrenciesQuotes: () => dispatch(fetchCurrencyQuotes()),\n  expenseDispatch: (expenseData) => dispatch(expenseAction(expenseData)),\n});\n\nconst mapStateToProps = (store) => ({\n  currencies: store.wallet.currencies,\n  quotes: store.wallet.quotes,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletForm);\n","import React from 'react';\nimport Header from '../components/Header';\nimport Table from '../components/Table';\nimport WalletForm from '../components/WalletForm';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <div>\n        <h2>TrybeWallet</h2>\n        <Header />\n        <WalletForm />\n        <Table />\n      </div>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <div>\n      <Route>\n        <Switch>\n          <Route exact path=\"/\" component={ Login } />\n          <Route path=\"/carteira\" component={ Wallet } />\n        </Switch>\n      </Route>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const INITIAL_STATE = { email: '' };\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'USER_EMAIL':\n    return { ...state, email: action.email };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer serÃ¡ responsÃ¡vel por tratar o todas as informaÃ§Ãµes relacionadas as despesas\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  editor: false,\n  idToEdit: '',\n  quotes: {},\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'ADD_DATA_EXPENSE':\n    return { ...state, expenses: [...state.expenses, action.expenseData] };\n  case 'NEW_DATA_EXPENSES':\n    return { ...state, expenses: action.newExpensesData };\n  case 'EDIT_EXPENSE':\n    return { ...state, idToEdit: action.id, editor: true };\n  case 'END_EDIT_EXPENSE':\n    return { ...state, editor: false, idToEdit: '', expenses: action.newExpenses };\n  case 'GET_CURRENCIES':\n    return { ...state, currencies: action.currencies };\n  case 'GET_QUOTAS':\n    return { ...state, quotes: action.quotes };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÃ‡ÃƒO: vocÃª obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}